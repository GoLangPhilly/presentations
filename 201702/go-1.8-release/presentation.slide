Go 1.8 Release Party
16 Feb 2017
Golang Philly
Tags: 1.8, release party

Dave Walk
Software Engineer, Sidecar
@ddw17


* License and Materials

This presentation is licensed under the [[https://creativecommons.org/licenses/by-sa/4.0/][Creative Commons Attribution-ShareAlike 4.0 International]] licence.

The materials for this presentation are available on GitHub:

.link https://github.com/davecheney/go-1.8-release-party

You are encouraged to remix, transform, or build upon the material, providing you distribute your contributions under the same license.

If you have suggestions or corrections to this presentation, please raise [[https://github.com/davecheney/go-1.8-release-party/issues][an issue on the GitHub project]].

Some details also taken from Francesc Campoy's [[https://talks.golang.org/2017/state-of-go.slide#1][The State of Go February 2017 presentation]]

* Go 1.8

Go 1.8 was released on the 16th of February. 

Go 1.8 is the 9th release in the Go 1 series. It follows from the previous version, Go 1.7, [[https://blog.golang.org/go1.7][released on the 16th of August, 2016]]

.link https://blog.golang.org/go1.8

* Topics
- Language Addition and Updates
- Performance
- Tools
- 1.9

* Language

* Struct conversion

When explicitly converting a value from one struct type to another, as of Go 1.8 the tags are ignored.

.code examples/struct_conversion.go

* Struct conversion

Both types still need to have:

- same sequence of fields in the same order
- corresponding fields with the same type

* Sorting
Instead of writing `Len()`, `Swap()` and `Less()` functtions, there's a new `sort.Slice()` that just takes a less function

.code examples/new_slice_sort.go

There are also new `slice.SliceTable` and `slice.SliceIsSorted` functions.

*Is* a bit slower than the regular way to sort

* HTTP Shutdown
New `Shutdown()` method to `http.Server` gracefully shuts down the server without interrupting any active connections

.code examples/server_shutdown.go

.code examples/server_shutdown_examine.go

* More Context Support

Continuing Go 1.7's adoption of `context.Context` into the standard library, Go 1.8 adds more context support to existing packages:

- The new `Server.Shutdown` takes a context argument.
- There have been significant additions to the `database/sql` package with context support.
- All nine of the new `Lookup` methods on the new `net.Resolver` now take a context.

* Performance

* Performance

As always, the changes are so general and varied that precise statements about performance are difficult to make. Most programs should run a bit faster, due to speedups in the garbage collector and optimizations in the standard library.

[[https://github.com/golang/go/issues/18964][HTTP Regression]]

Lightning talks next month?

* Miscellaneous performance improvements

There have been optimizations to implementations in the `bytes`, `crypto/aes`, `crypto/cipher`, `crypto/elliptic`, `crypto/sha256`, `crypto/sha512`, `encoding/asn1`, `encoding/csv`, `encoding/hex`, `encoding/json`, `hash/crc32`, `image/color`, `image/draw`, `math`, `math/big`, `reflect`, `regexp`, `runtime`, `strconv`, `strings`, `syscall`, `text/template`, and `unicode/utf8` packages.

* Garbage Collector

Garbage collection pauses should be significantly shorter than they were in Go 1.7, usually under 100 microseconds and often as low as 10 microseconds. More work remains for Go 1.9.

.link https://github.com/golang/proposal/blob/master/design/17503-eliminate-rescan.md

* Defer

The overhead of deferred function calls has been reduced by about half.

* Cgo

The overhead of calls from Go into C has been reduced by about half.

* Compiler speed

About a 12-15% improvement compared to Go 1.7

* Tools

* Default GOPATH

When `GOPATH` is not defined, the tool will use:

- `$HOME/go` on Unix
- `%USERPROFILE%\go` on Windows

[[https://github.com/golang/go/issues/17262][Initial discussion]]

[[https://github.com/golang/go/issues/17271][future possibilities]]

* Tools

- The yacc tool (previously available by running “go tool yacc”) has been removed. As of Go 1.7 it was no longer used by the Go compiler. It has moved to the “tools” repository and is now available at golang.org/x/tools/cmd/goyacc.
- The trace tool has a new -pprof flag for producing pprof-compatible blocking and latency profiles from an execution trace. Garbage collection events are now shown more clearly in the execution trace viewer. Garbage collection activity is shown on its own row and GC helper goroutines are annotated with their roles.
- Vet is stricter in some ways and looser where it previously caused false positives. Vet now checks for copying an array of locks, duplicate JSON and XML struct field tags, non-space-separated struct tags, deferred calls to HTTP Response.Body.Close before checking errors, and indexed arguments in Printf. It also improves existing checks.

* go bug

The new `go`bug` command starts a bug report on GitHub, prefilled with information about the current system.

.play examples/bug.go

* go fix

`go`fix` now rewrites references to `golang.org/x/net/context` to the standard library provided `context` package.

* Mutex contention profile

Peter Wienberger has added a new pprof profile, mutex contention.

.code examples/mutex_profiling.go

_note_: due to an oversight this only works with `sync.Mutex`, not `sync.RWMutex`, this oversight will be addressed early in Go 1.9.

* Plugins

Go now supports a “plugin” build mode for generating plugins written in Go, and a new plugin package for loading such plugins at run time. Plugin support is only currently available on Linux.

* Plugin Example

.code examples/plugins/plugin.go

Then to build `plugin.so`

 $ go build -buildmode=plugin plugin.go

* Plugin Example - Using Plugin
.code examples/plugins/main.go  /START OMIT/,/END OMIT/

 $ go run main.go
 main started...
 Plugin loading
 Hello, number 7

* Plugin Example - Code Hot Loading
.link https://github.com/campoy/golang-plugins

* And more
.link https://golang.org/doc/go1.8 

* What's coming up in Go 1.9

_note_: All of these are speculation, nothing is set in stone until code hits the repo.

* Aliases

After being rolled back before the Go 1.8 freeze, aliases are being re-proposed for Go 1.9 in a more limited fashion.

.link https://golang.org/design/18130-type-alias
.link https://github.com/golang/go/issues/18130

* Faster / cheaper runtime.MemStats

The cost of calling `runtime.MemStats` is propotional to the size of the heap; Austin recently timed it at ~1.7ms per Gb.

There is a CL ready to land that reduces it to 20 us per proc (thread servicing a goroutine) which is a much smaller upper bound.

.link https://golang.org/issue/13613

* New calling convention

On [[https://changelog.com/gotime/27][GoTime episode 27]], Keith Randall hinted that Go may change its calling convention.

The current Go calling convention passes all parameters and results on the stack.

This makes things like the scheduler and the garbage collector simpler, as you know when you enter a function, no registers are live or contain pointers.

Most other languages pass some or all of their arguments in registers, and Keith thinks there is possibly a 10% speedup in changing the calling convention.

Changing the calling convention would affect all the assembly code written. One solution would be to have the assember/compiler/go tool ? generate studs to convert between new and old calling conventions for 

* Official dependency management tool

.link https://github.com/golang/dep

Still a work in progress, could it be a part of tools in 1.9?

* Logging Interface in standard library

.link https://docs.google.com/document/d/1oTjtY49y8iSxmM9YBaz2NrZIlaXtQsq3nQMd-E0HtwM/edit
.link https://groups.google.com/forum/#!topic/golang-dev/F3l9Iz1JX4g

* Go 1.8 may be the last to support ARMv5

Supporting ARMv5 has been a problem for several releases. 

Currently we have no ARMv5 builders so have no idea if Go 1.8 actually works on real ARMv5 hardware (we test on ARMv7).

If you or your company care about ARMv5, you have to shoulder some of the burdon. Contact @bradfitz and set up a builder.

_No_ARMv5_builders_means_ARMv5_support_will_be_dropped_in_Go_1.9_.

From release notes:

Go 1.9 will likely require the ARMv6K (as found in the Raspberry Pi 1) or later. To identify whether a Linux system is ARMv6K or later, run “go tool dist -check-armv6k” (to facilitate testing, it is also possible to just copy the dist command to the system without installing a full copy of Go 1.8) and if the program terminates with output "ARMv6K supported." then the system implements ARMv6K or later.

* os.Executable

.code examples/executable.go
 
.link http://beta.golang.org/pkg/os/#Executable

"Executable returns the path name for the executable that started the current process."

* Conclusion
- Faster gc, compilation, etc.
- Plugins
- Struct conversion
- Easier sorting
- `http.Shutdown`
- Mutex contention profiler
- Other small tool updates

Upgrade to Go 1.8, now! 

It's literally the best version of Go to date.


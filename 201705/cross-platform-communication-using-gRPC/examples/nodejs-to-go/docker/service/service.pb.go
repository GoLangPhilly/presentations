// Code generated by protoc-gen-go.
// source: docker/service.proto
// DO NOT EDIT!

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	docker/service.proto

It has these top-level messages:
	Container
	GetAllContainersRequest
	ContainerCatalog
	ContainerStatsRequest
	ContainerStats
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ContainerStats_MemorySize int32

const (
	ContainerStats_B  ContainerStats_MemorySize = 0
	ContainerStats_KB ContainerStats_MemorySize = 1
	ContainerStats_MB ContainerStats_MemorySize = 2
	ContainerStats_GB ContainerStats_MemorySize = 3
	ContainerStats_TB ContainerStats_MemorySize = 4
	ContainerStats_PB ContainerStats_MemorySize = 5
	ContainerStats_EB ContainerStats_MemorySize = 6
	ContainerStats_ZB ContainerStats_MemorySize = 7
	ContainerStats_YB ContainerStats_MemorySize = 8
)

var ContainerStats_MemorySize_name = map[int32]string{
	0: "B",
	1: "KB",
	2: "MB",
	3: "GB",
	4: "TB",
	5: "PB",
	6: "EB",
	7: "ZB",
	8: "YB",
}
var ContainerStats_MemorySize_value = map[string]int32{
	"B":  0,
	"KB": 1,
	"MB": 2,
	"GB": 3,
	"TB": 4,
	"PB": 5,
	"EB": 6,
	"ZB": 7,
	"YB": 8,
}

func (x ContainerStats_MemorySize) String() string {
	return proto.EnumName(ContainerStats_MemorySize_name, int32(x))
}
func (ContainerStats_MemorySize) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type Container struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Status  string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	State   string `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	Created int64  `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	Running bool   `protobuf:"varint,6,opt,name=running" json:"running,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Container) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Container) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Container) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Container) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Container) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

type GetAllContainersRequest struct {
}

func (m *GetAllContainersRequest) Reset()                    { *m = GetAllContainersRequest{} }
func (m *GetAllContainersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllContainersRequest) ProtoMessage()               {}
func (*GetAllContainersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ContainerCatalog struct {
	Containers []*Container `protobuf:"bytes,1,rep,name=containers" json:"containers,omitempty"`
}

func (m *ContainerCatalog) Reset()                    { *m = ContainerCatalog{} }
func (m *ContainerCatalog) String() string            { return proto.CompactTextString(m) }
func (*ContainerCatalog) ProtoMessage()               {}
func (*ContainerCatalog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ContainerCatalog) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

type ContainerStatsRequest struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
}

func (m *ContainerStatsRequest) Reset()                    { *m = ContainerStatsRequest{} }
func (m *ContainerStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerStatsRequest) ProtoMessage()               {}
func (*ContainerStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ContainerStatsRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

type ContainerStats struct {
	Container        string                    `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	CpuPercentage    float64                   `protobuf:"fixed64,2,opt,name=cpu_percentage,json=cpuPercentage" json:"cpu_percentage,omitempty"`
	MemoryPercentage float64                   `protobuf:"fixed64,3,opt,name=memory_percentage,json=memoryPercentage" json:"memory_percentage,omitempty"`
	MemoryLimit      float64                   `protobuf:"fixed64,4,opt,name=memory_limit,json=memoryLimit" json:"memory_limit,omitempty"`
	MemorySizeType   ContainerStats_MemorySize `protobuf:"varint,5,opt,name=memory_size_type,json=memorySizeType,enum=ContainerStats_MemorySize" json:"memory_size_type,omitempty"`
}

func (m *ContainerStats) Reset()                    { *m = ContainerStats{} }
func (m *ContainerStats) String() string            { return proto.CompactTextString(m) }
func (*ContainerStats) ProtoMessage()               {}
func (*ContainerStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ContainerStats) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *ContainerStats) GetCpuPercentage() float64 {
	if m != nil {
		return m.CpuPercentage
	}
	return 0
}

func (m *ContainerStats) GetMemoryPercentage() float64 {
	if m != nil {
		return m.MemoryPercentage
	}
	return 0
}

func (m *ContainerStats) GetMemoryLimit() float64 {
	if m != nil {
		return m.MemoryLimit
	}
	return 0
}

func (m *ContainerStats) GetMemorySizeType() ContainerStats_MemorySize {
	if m != nil {
		return m.MemorySizeType
	}
	return ContainerStats_B
}

func init() {
	proto.RegisterType((*Container)(nil), "Container")
	proto.RegisterType((*GetAllContainersRequest)(nil), "GetAllContainersRequest")
	proto.RegisterType((*ContainerCatalog)(nil), "ContainerCatalog")
	proto.RegisterType((*ContainerStatsRequest)(nil), "ContainerStatsRequest")
	proto.RegisterType((*ContainerStats)(nil), "ContainerStats")
	proto.RegisterEnum("ContainerStats_MemorySize", ContainerStats_MemorySize_name, ContainerStats_MemorySize_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DockerService service

type DockerServiceClient interface {
	GetAllContainers(ctx context.Context, in *GetAllContainersRequest, opts ...grpc.CallOption) (*ContainerCatalog, error)
	GetContainerStats(ctx context.Context, in *ContainerStatsRequest, opts ...grpc.CallOption) (DockerService_GetContainerStatsClient, error)
}

type dockerServiceClient struct {
	cc *grpc.ClientConn
}

func NewDockerServiceClient(cc *grpc.ClientConn) DockerServiceClient {
	return &dockerServiceClient{cc}
}

func (c *dockerServiceClient) GetAllContainers(ctx context.Context, in *GetAllContainersRequest, opts ...grpc.CallOption) (*ContainerCatalog, error) {
	out := new(ContainerCatalog)
	err := grpc.Invoke(ctx, "/DockerService/GetAllContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServiceClient) GetContainerStats(ctx context.Context, in *ContainerStatsRequest, opts ...grpc.CallOption) (DockerService_GetContainerStatsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DockerService_serviceDesc.Streams[0], c.cc, "/DockerService/GetContainerStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &dockerServiceGetContainerStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DockerService_GetContainerStatsClient interface {
	Recv() (*ContainerStats, error)
	grpc.ClientStream
}

type dockerServiceGetContainerStatsClient struct {
	grpc.ClientStream
}

func (x *dockerServiceGetContainerStatsClient) Recv() (*ContainerStats, error) {
	m := new(ContainerStats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DockerService service

type DockerServiceServer interface {
	GetAllContainers(context.Context, *GetAllContainersRequest) (*ContainerCatalog, error)
	GetContainerStats(*ContainerStatsRequest, DockerService_GetContainerStatsServer) error
}

func RegisterDockerServiceServer(s *grpc.Server, srv DockerServiceServer) {
	s.RegisterService(&_DockerService_serviceDesc, srv)
}

func _DockerService_GetAllContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).GetAllContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DockerService/GetAllContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).GetAllContainers(ctx, req.(*GetAllContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerService_GetContainerStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContainerStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DockerServiceServer).GetContainerStats(m, &dockerServiceGetContainerStatsServer{stream})
}

type DockerService_GetContainerStatsServer interface {
	Send(*ContainerStats) error
	grpc.ServerStream
}

type dockerServiceGetContainerStatsServer struct {
	grpc.ServerStream
}

func (x *dockerServiceGetContainerStatsServer) Send(m *ContainerStats) error {
	return x.ServerStream.SendMsg(m)
}

var _DockerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DockerService",
	HandlerType: (*DockerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllContainers",
			Handler:    _DockerService_GetAllContainers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetContainerStats",
			Handler:       _DockerService_GetContainerStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "docker/service.proto",
}

func init() { proto.RegisterFile("docker/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0xad, 0x93, 0x36, 0x5b, 0xef, 0x58, 0x70, 0xad, 0x31, 0x4c, 0xc5, 0x43, 0x89, 0x84, 0x54,
	0x81, 0x14, 0x50, 0x11, 0xaf, 0x88, 0x79, 0x43, 0x7d, 0x80, 0x49, 0x53, 0xba, 0x17, 0xf6, 0x52,
	0x85, 0xf4, 0xaa, 0xb2, 0x68, 0x3e, 0x48, 0x1c, 0xa4, 0xee, 0x5f, 0x20, 0xf1, 0x83, 0xf8, 0x69,
	0xc8, 0x4e, 0xeb, 0xb6, 0x11, 0xec, 0xe9, 0xdc, 0x7b, 0xce, 0xb9, 0x96, 0x75, 0x8f, 0x0d, 0x67,
	0x8b, 0x3c, 0xf9, 0x8e, 0xe5, 0x9b, 0x0a, 0xcb, 0x9f, 0x32, 0xc1, 0xb0, 0x28, 0x73, 0x95, 0x07,
	0xbf, 0x08, 0xf4, 0x2f, 0xf3, 0x4c, 0xc5, 0x32, 0xc3, 0x92, 0xf9, 0xe0, 0xc8, 0x05, 0x27, 0x23,
	0x32, 0xee, 0x47, 0x8e, 0x5c, 0x30, 0x06, 0xdd, 0x2c, 0x4e, 0x91, 0x3b, 0x86, 0x31, 0x35, 0x3b,
	0x07, 0xaf, 0x52, 0xb1, 0xaa, 0x2b, 0xee, 0x1a, 0x76, 0xd3, 0xb1, 0x33, 0xe8, 0xe9, 0x0a, 0x79,
	0xd7, 0xd0, 0x4d, 0xc3, 0x38, 0x1c, 0x25, 0x25, 0xc6, 0x0a, 0x17, 0xbc, 0x37, 0x22, 0x63, 0x37,
	0xda, 0xb6, 0x5a, 0x29, 0xeb, 0x2c, 0x93, 0xd9, 0x92, 0x7b, 0x23, 0x32, 0x3e, 0x8e, 0xb6, 0x6d,
	0xf0, 0x0c, 0x9e, 0x4e, 0x51, 0x5d, 0xac, 0x56, 0xf6, 0x62, 0x55, 0x84, 0x3f, 0x6a, 0xac, 0x54,
	0xf0, 0x01, 0xa8, 0x25, 0x2f, 0x63, 0x15, 0xaf, 0xf2, 0x25, 0x7b, 0x05, 0x90, 0x58, 0x23, 0x27,
	0x23, 0x77, 0x7c, 0x32, 0x81, 0xd0, 0xda, 0xa2, 0x3d, 0x35, 0x78, 0x0f, 0x4f, 0xac, 0x30, 0x53,
	0xb1, 0xda, 0x1e, 0xcc, 0x9e, 0x43, 0xdf, 0xda, 0x36, 0x0b, 0xd8, 0x11, 0xc1, 0x1f, 0x07, 0xfc,
	0xc3, 0xb9, 0x87, 0x07, 0xd8, 0x4b, 0xf0, 0x93, 0xa2, 0x9e, 0x17, 0x58, 0x26, 0x98, 0xa9, 0x78,
	0xd9, 0xac, 0x90, 0x44, 0xa7, 0x49, 0x51, 0xdf, 0x58, 0x92, 0xbd, 0x86, 0x41, 0x8a, 0x69, 0x5e,
	0xae, 0xf7, 0x9d, 0xae, 0x71, 0xd2, 0x46, 0xd8, 0x33, 0xbf, 0x80, 0x47, 0x1b, 0xf3, 0x4a, 0xa6,
	0x52, 0x99, 0x3d, 0x93, 0xe8, 0xa4, 0xe1, 0xbe, 0x68, 0x8a, 0x5d, 0xc1, 0x66, 0x6c, 0x5e, 0xc9,
	0x7b, 0x9c, 0xab, 0x75, 0x81, 0x66, 0xed, 0xfe, 0x64, 0x18, 0x1e, 0xde, 0x3f, 0xbc, 0x36, 0xbe,
	0x99, 0xbc, 0xc7, 0xc8, 0x4f, 0x6d, 0x7d, 0xbb, 0x2e, 0x30, 0x98, 0x01, 0xec, 0x54, 0xd6, 0x03,
	0x22, 0x68, 0x87, 0x79, 0xe0, 0x7c, 0x16, 0x94, 0x68, 0xbc, 0x16, 0xd4, 0xd1, 0x38, 0x15, 0xd4,
	0xd5, 0x78, 0x2b, 0x68, 0x57, 0xe3, 0x8d, 0xa0, 0x3d, 0x8d, 0x9f, 0x04, 0xf5, 0x34, 0xde, 0x09,
	0x7a, 0xa4, 0xf1, 0xab, 0xa0, 0xc7, 0x93, 0xdf, 0x04, 0x4e, 0xaf, 0xcc, 0x0b, 0x9c, 0x35, 0x0f,
	0x90, 0x5d, 0x00, 0x6d, 0xc7, 0xcc, 0x78, 0xf8, 0x9f, 0xe4, 0x87, 0x83, 0xb0, 0x1d, 0x7c, 0xd0,
	0x61, 0x1f, 0x61, 0x30, 0x45, 0xd5, 0x4a, 0xe6, 0x3c, 0xfc, 0x67, 0xc4, 0xc3, 0xc7, 0x2d, 0x3e,
	0xe8, 0xbc, 0x25, 0x82, 0xde, 0xf9, 0x87, 0xff, 0xe2, 0x9b, 0x67, 0x3e, 0xc6, 0xbb, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x62, 0x84, 0x5c, 0x3b, 0x30, 0x03, 0x00, 0x00,
}

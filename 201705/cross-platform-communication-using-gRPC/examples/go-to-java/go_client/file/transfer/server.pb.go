// Code generated by protoc-gen-go.
// source: file/server.proto
// DO NOT EDIT!

/*
Package transfer is a generated protocol buffer package.

It is generated from these files:
	file/server.proto

It has these top-level messages:
	FileRequest
	FileResponse
*/
package transfer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileRequest struct {
	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
}

func (m *FileRequest) Reset()                    { *m = FileRequest{} }
func (m *FileRequest) String() string            { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()               {}
func (*FileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FileRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FileRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type FileResponse struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Size     uint64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	IsOk     bool   `protobuf:"varint,3,opt,name=isOk" json:"isOk,omitempty"`
}

func (m *FileResponse) Reset()                    { *m = FileResponse{} }
func (m *FileResponse) String() string            { return proto.CompactTextString(m) }
func (*FileResponse) ProtoMessage()               {}
func (*FileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FileResponse) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *FileResponse) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileResponse) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func init() {
	proto.RegisterType((*FileRequest)(nil), "FileRequest")
	proto.RegisterType((*FileResponse)(nil), "FileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FileTransferService service

type FileTransferServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (FileTransferService_UploadClient, error)
}

type fileTransferServiceClient struct {
	cc *grpc.ClientConn
}

func NewFileTransferServiceClient(cc *grpc.ClientConn) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (FileTransferService_UploadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FileTransferService_serviceDesc.Streams[0], c.cc, "/FileTransferService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceUploadClient{stream}
	return x, nil
}

type FileTransferService_UploadClient interface {
	Send(*FileRequest) error
	CloseAndRecv() (*FileResponse, error)
	grpc.ClientStream
}

type fileTransferServiceUploadClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceUploadClient) Send(m *FileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileTransferServiceUploadClient) CloseAndRecv() (*FileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FileTransferService service

type FileTransferServiceServer interface {
	Upload(FileTransferService_UploadServer) error
}

func RegisterFileTransferServiceServer(s *grpc.Server, srv FileTransferServiceServer) {
	s.RegisterService(&_FileTransferService_serviceDesc, srv)
}

func _FileTransferService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransferServiceServer).Upload(&fileTransferServiceUploadServer{stream})
}

type FileTransferService_UploadServer interface {
	SendAndClose(*FileResponse) error
	Recv() (*FileRequest, error)
	grpc.ServerStream
}

type fileTransferServiceUploadServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceUploadServer) SendAndClose(m *FileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileTransferServiceUploadServer) Recv() (*FileRequest, error) {
	m := new(FileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileTransferService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _FileTransferService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file/server.proto",
}

func init() { proto.RegisterFile("file/server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4f, 0x03, 0x21,
	0x18, 0xc5, 0x83, 0x36, 0x4d, 0xfd, 0x3c, 0x07, 0x71, 0xf0, 0xd2, 0xe9, 0x52, 0x07, 0x99, 0x68,
	0xa2, 0xb3, 0x1d, 0x1c, 0x5c, 0x4d, 0x50, 0x17, 0x17, 0x83, 0xd7, 0xaf, 0x48, 0x44, 0xc0, 0x0f,
	0x6c, 0xa2, 0x7f, 0xbd, 0x81, 0x6a, 0x73, 0xb7, 0x3d, 0xf8, 0xde, 0xfb, 0xe5, 0xe5, 0xc1, 0xe9,
	0xc6, 0x3a, 0x5c, 0x26, 0xa4, 0x2d, 0x92, 0x8c, 0x14, 0x72, 0x58, 0xdc, 0xc0, 0xf1, 0x9d, 0x75,
	0xa8, 0xf0, 0xf3, 0x0b, 0x53, 0xe6, 0x1c, 0x26, 0x6b, 0x9d, 0x75, 0xcb, 0x3a, 0x26, 0x1a, 0x55,
	0x35, 0x9f, 0xc3, 0xac, 0xe4, 0xbc, 0xfe, 0xc0, 0xf6, 0xa0, 0x63, 0xe2, 0x48, 0xed, 0xdf, 0x0b,
	0x05, 0xcd, 0x2e, 0x9e, 0x62, 0xf0, 0x09, 0x47, 0x5e, 0x36, 0xf6, 0x16, 0x76, 0xb2, 0x3f, 0x3b,
	0xc6, 0x44, 0x55, 0x5d, 0xfe, 0x6c, 0xba, 0x7f, 0x6f, 0x0f, 0x3b, 0x26, 0x66, 0xaa, 0xea, 0xab,
	0x15, 0x9c, 0x15, 0xe6, 0x23, 0x69, 0x9f, 0x36, 0x48, 0x0f, 0x48, 0x5b, 0xdb, 0x23, 0xbf, 0x84,
	0xe9, 0x53, 0x74, 0x41, 0xaf, 0x79, 0x23, 0x07, 0x95, 0xe7, 0x27, 0x72, 0xd8, 0x40, 0xb0, 0xdb,
	0x15, 0x5c, 0x04, 0x32, 0xd2, 0x04, 0xa7, 0xbd, 0x89, 0x6f, 0xd6, 0xb9, 0x6f, 0x69, 0x28, 0xf6,
	0xb2, 0x34, 0x91, 0xf9, 0x0f, 0xfb, 0x7c, 0x6e, 0xc2, 0x4b, 0xef, 0x2c, 0xfa, 0xbc, 0xac, 0xb3,
	0xfc, 0x1f, 0x5e, 0xa7, 0x75, 0x99, 0xeb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0x40, 0x2f,
	0xbe, 0x2e, 0x01, 0x00, 0x00,
}
